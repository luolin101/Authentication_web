{"remainingRequest":"C:\\Users\\86191\\Desktop\\text\\Authentication_web\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\86191\\Desktop\\text\\Authentication_web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\templateLoader.js??ref--6!C:\\Users\\86191\\Desktop\\text\\Authentication_web\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\86191\\Desktop\\text\\Authentication_web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\index.js??ref--0-1!C:\\Users\\86191\\Desktop\\text\\Authentication_web\\src\\components\\page\\Upload.vue?vue&type=template&id=5e57d17e","dependencies":[{"path":"C:\\Users\\86191\\Desktop\\text\\Authentication_web\\src\\components\\page\\Upload.vue","mtime":1611590737000},{"path":"C:\\Users\\86191\\Desktop\\text\\Authentication_web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\86191\\Desktop\\text\\Authentication_web\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\86191\\Desktop\\text\\Authentication_web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\86191\\Desktop\\text\\Authentication_web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\86191\\Desktop\\text\\Authentication_web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgY3JlYXRlQ29tbWVudFZOb2RlIGFzIF9jcmVhdGVDb21tZW50Vk5vZGUsIHJlc29sdmVDb21wb25lbnQgYXMgX3Jlc29sdmVDb21wb25lbnQsIGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgY3JlYXRlRWxlbWVudFZOb2RlIGFzIF9jcmVhdGVFbGVtZW50Vk5vZGUsIGNyZWF0ZVRleHRWTm9kZSBhcyBfY3JlYXRlVGV4dFZOb2RlLCB3aXRoQ3R4IGFzIF93aXRoQ3R4LCBGcmFnbWVudCBhcyBfRnJhZ21lbnQsIG9wZW5CbG9jayBhcyBfb3BlbkJsb2NrLCBjcmVhdGVFbGVtZW50QmxvY2sgYXMgX2NyZWF0ZUVsZW1lbnRCbG9jayB9IGZyb20gInZ1ZSI7Cgp2YXIgX2hvaXN0ZWRfMSA9IC8qI19fUFVSRV9fKi9fY3JlYXRlVGV4dFZOb2RlKCLpgInmi6nmlofku7YiKTsKCnZhciBfaG9pc3RlZF8yID0gLyojX19QVVJFX18qL19jcmVhdGVFbGVtZW50Vk5vZGUoImkiLCB7CiAgY2xhc3M6ICJlbC1pY29uLXVwbG9hZCBlbC1pY29uLS1yaWdodCIKfSwgbnVsbCwgLTEKLyogSE9JU1RFRCAqLwopOwoKZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcihfY3R4LCBfY2FjaGUsICRwcm9wcywgJHNldHVwLCAkZGF0YSwgJG9wdGlvbnMpIHsKICB2YXIgX2NvbXBvbmVudF91cGxvYWRlcl91bnN1cHBvcnQgPSBfcmVzb2x2ZUNvbXBvbmVudCgidXBsb2FkZXItdW5zdXBwb3J0Iik7CgogIHZhciBfY29tcG9uZW50X3VwbG9hZGVyX2J0biA9IF9yZXNvbHZlQ29tcG9uZW50KCJ1cGxvYWRlci1idG4iKTsKCiAgdmFyIF9jb21wb25lbnRfdXBsb2FkZXJfZHJvcCA9IF9yZXNvbHZlQ29tcG9uZW50KCJ1cGxvYWRlci1kcm9wIik7CgogIHZhciBfY29tcG9uZW50X3VwbG9hZGVyX2xpc3QgPSBfcmVzb2x2ZUNvbXBvbmVudCgidXBsb2FkZXItbGlzdCIpOwoKICB2YXIgX2NvbXBvbmVudF91cGxvYWRlciA9IF9yZXNvbHZlQ29tcG9uZW50KCJ1cGxvYWRlciIpOwoKICByZXR1cm4gX29wZW5CbG9jaygpLCBfY3JlYXRlRWxlbWVudEJsb2NrKF9GcmFnbWVudCwgbnVsbCwgW19jcmVhdGVDb21tZW50Vk5vZGUoIiDkuIrkvKDlmaggIiksIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X3VwbG9hZGVyLCB7CiAgICByZWY6ICJ1cGxvYWRlciIsCiAgICBvcHRpb25zOiAkZGF0YS5vcHRpb25zLAogICAgYXV0b1N0YXJ0OiBmYWxzZSwKICAgICJmaWxlLXN0YXR1cy10ZXh0IjogJGRhdGEuZmlsZVN0YXR1c1RleHQsCiAgICBvbkZpbGVBZGRlZDogJG9wdGlvbnMub25GaWxlQWRkZWQsCiAgICBvbkZpbGVTdWNjZXNzOiAkb3B0aW9ucy5vbkZpbGVTdWNjZXNzLAogICAgb25GaWxlUHJvZ3Jlc3M6IF9jdHgub25GaWxlUHJvZ3Jlc3MsCiAgICBvbkZpbGVFcnJvcjogJG9wdGlvbnMub25GaWxlRXJyb3IsCiAgICBjbGFzczogInVwbG9hZGVyLXVpIgogIH0sIHsKICAgIGRlZmF1bHQ6IF93aXRoQ3R4KGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIFtfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF91cGxvYWRlcl91bnN1cHBvcnQpLCBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF91cGxvYWRlcl9kcm9wLCBudWxsLCB7CiAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoZnVuY3Rpb24gKCkgewogICAgICAgICAgcmV0dXJuIFtfY3JlYXRlRWxlbWVudFZOb2RlKCJkaXYiLCBudWxsLCBbX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfdXBsb2FkZXJfYnRuLCB7CiAgICAgICAgICAgIGlkOiAiZ2xvYmFsLXVwbG9hZGVyLWJ0biIsCiAgICAgICAgICAgIGF0dHJzOiAkZGF0YS5hdHRycywKICAgICAgICAgICAgcmVmOiAidXBsb2FkQnRuIgogICAgICAgICAgfSwgewogICAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIFtfaG9pc3RlZF8xLCBfaG9pc3RlZF8yXTsKICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF86IDEKICAgICAgICAgICAgLyogU1RBQkxFICovCgogICAgICAgICAgfSwgOAogICAgICAgICAgLyogUFJPUFMgKi8KICAgICAgICAgICwgWyJhdHRycyJdKV0pXTsKICAgICAgICB9KSwKICAgICAgICBfOiAxCiAgICAgICAgLyogU1RBQkxFICovCgogICAgICB9KSwgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfdXBsb2FkZXJfbGlzdCldOwogICAgfSksCiAgICBfOiAxCiAgICAvKiBTVEFCTEUgKi8KCiAgfSwgOAogIC8qIFBST1BTICovCiAgLCBbIm9wdGlvbnMiLCAiZmlsZS1zdGF0dXMtdGV4dCIsICJvbkZpbGVBZGRlZCIsICJvbkZpbGVTdWNjZXNzIiwgIm9uRmlsZVByb2dyZXNzIiwgIm9uRmlsZUVycm9yIl0pXSwgMjExMgogIC8qIFNUQUJMRV9GUkFHTUVOVCwgREVWX1JPT1RfRlJBR01FTlQgKi8KICApOwp9"},{"version":3,"sources":["C:\\Users\\86191\\Desktop\\text\\Authentication_web\\src\\components\\page\\Upload.vue"],"names":[],"mappings":";;+CAesF,M;;8BAAI,mBAAA,CAA6C,GAA7C,EAA6C;AAA1C,EAAA,KAAK,EAAC;AAAoC,CAA7C,EAAwC,IAAxC,EAAwC,CAAA;AAAA;AAAxC,C;;;;;;;;;;;;;6DAdtF,mBAAA,CAAA,OAAA,C,EACA,YAAA,CAiBW,mBAjBX,EAiBW;AAhBP,IAAA,GAAG,EAAC,UAgBG;AAfN,IAAA,OAAO,EAAE,KAAA,CAAA,OAeH;AAdN,IAAA,SAAS,EAAC,KAcJ;AAbN,wBAAkB,KAAA,CAAA,cAaZ;AAZN,IAAA,WAAU,EAAE,QAAA,CAAA,WAYN;AAXN,IAAA,aAAY,EAAE,QAAA,CAAA,aAWR;AAVN,IAAA,cAAa,EAAE,IAAA,CAAA,cAUT;AATN,IAAA,WAAU,EAAE,QAAA,CAAA,WASN;AARP,IAAA,KAAK,EAAC;AAQC,GAjBX,E;sBAUI;AAAA,aAAyC,CAAzC,YAAA,CAAyC,6BAAzC,CAAyC,EACzC,YAAA,CAIgB,wBAJhB,EAIgB,IAJhB,EAIgB;0BAHZ;AAAA,iBAEM,CAFN,mBAAA,CAEM,KAFN,EAEM,IAFN,EAEM,CADF,YAAA,CAAsI,uBAAtI,EAAsI;AAAxH,YAAA,EAAE,EAAC,qBAAqH;AAA9F,YAAA,KAAK,EAAE,KAAA,CAAA,KAAuF;AAAhF,YAAA,GAAG,EAAC;AAA4E,WAAtI,E;8BAAsE;AAAA,qBAAI,C,UAAA,EAAA,UAAA,CAAJ;AAAA,a;;;;WAAtE,E;;AAAA,Y,SAAA,CACE,CAFN,CAEM,CAFN;AAAA,S,CAGY;;;;AAAA,OAJhB,CADyC,EAMzC,YAAA,CAA+B,wBAA/B,CANyC,CAAzC;AAAA,K;;;;GAVJ,E;;AAAA,I,gGAAA,C","sourcesContent":["<template>\n    <!-- 上传器 -->\n    <uploader\n        ref=\"uploader\"\n        :options=\"options\"\n        :autoStart=false\n        :file-status-text=\"fileStatusText\"\n        @file-added=\"onFileAdded\"\n        @file-success=\"onFileSuccess\"\n        @file-progress=\"onFileProgress\"\n        @file-error=\"onFileError\"\n        class=\"uploader-ui\"> \n        <uploader-unsupport></uploader-unsupport>\n        <uploader-drop>\n            <div>\n                <uploader-btn id=\"global-uploader-btn\" :attrs=\"attrs\" ref=\"uploadBtn\">选择文件<i class=\"el-icon-upload el-icon--right\"></i></uploader-btn>\n            </div>\n        </uploader-drop>\n        <uploader-list></uploader-list>\n    </uploader>\n</template>\n\n<script>\n    import {ACCEPT_CONFIG} from '../common/config';\n    import SparkMD5 from 'spark-md5';\n    import {mergeFile} from \"@/api/modules/uploadFile\";\n\n    export default {\n        data () {\n            return {\n                options: {\n                    //目标上传 URL，默认POST\n                    target: process.env.VUE_APP_BASE_API+\"/uploader/chunk\",\n                    //分块大小(单位：字节)\n                    chunkSize: '2048000',\n                    //上传文件时文件内容的参数名，对应chunk里的Multipart对象名，默认对象名为file\n                    fileParameterName: 'upfile',\n                    //失败后最多自动重试上传次数\n                    maxChunkRetries: 3,\n                    //是否开启服务器分片校验，对应GET类型同名的target URL\n                    testChunks: true,   \n                    /* \n                    服务器分片校验函数，判断秒传及断点续传,传入的参数是Uploader.Chunk实例以及请求响应信息\n                    reponse码是successStatuses码时，才会进入该方法\n                    reponse码如果返回的是permanentErrors 中的状态码，不会进入该方法，直接进入onFileError函数 ，并显示上传失败\n                    reponse码是其他状态码，不会进入该方法，正常走标准上传\n                    checkChunkUploadedByResponse函数直接return true的话，不再调用上传接口\n                    */\n                    checkChunkUploadedByResponse: function (chunk, response_msg) {\n                        let objMessage = JSON.parse(response_msg);\n                        if (objMessage.skipUpload) {\n                            return true;\n                        }\n                        return (objMessage.uploadedChunks || []).indexOf(chunk.offset + 1) >= 0;\n                    }      \n                },\n                attrs: {\n                    accept: ACCEPT_CONFIG.getAll()\n                },\n                fileStatusText: {\n                        success: '上传成功',\n                        error: '上传失败',\n                        uploading: '上传中',\n                        paused: '暂停',\n                        waiting: '等待上传'\n                },\n            }\n        },\n        methods: {\n            onFileAdded(file) {\n                this.computeMD5(file);\n            },\n            /*\n            第一个参数 rootFile 就是成功上传的文件所属的根 Uploader.File 对象，它应该包含或者等于成功上传文件；\n            第二个参数 file 就是当前成功的 Uploader.File 对象本身；\n            第三个参数就是 message 就是服务端响应内容，永远都是字符串；\n            第四个参数 chunk 就是 Uploader.Chunk 实例，它就是该文件的最后一个块实例，如果你想得到请求响应码的话，chunk.xhr.status就是\n            */\n            onFileSuccess(rootFile, file, response, chunk) {\n                //refProjectId为预留字段，可关联附件所属目标，例如所属档案，所属工程等\n                file.refProjectId = \"123456789\";\n                mergeFile(file).then( responseData=> {\n                    if(responseData.data.code === 415){\n                        console.log(\"合并操作未成功，结果码：\"+responseData.data.code);\n                    }\n                }).catch(function (error){\n                    console.log(\"合并后捕获的未知异常：\"+error);\n                });\n            },\n            onFileError(rootFile, file, response, chunk) {\n                console.log('上传完成后异常信息：'+response);\n            },\n\n            /**\n             * 计算md5，实现断点续传及秒传\n             * @param file\n             */\n            computeMD5(file) {\n                file.pause();\n\n                //单个文件的大小限制2G\n                let fileSizeLimit = 2 * 1024 * 1024 * 1024;\n                console.log(\"文件大小：\"+file.size);\n                console.log(\"限制大小：\"+fileSizeLimit);\n                if(file.size > fileSizeLimit){\n                    this.$message({\n                        showClose: true,\n                        message: '文件大小不能超过2G'\n                    });\n                    file.cancel();\n                }\n\n                let fileReader = new FileReader();\n                let time = new Date().getTime();\n                let blobSlice = File.prototype.slice || File.prototype.mozSlice || File.prototype.webkitSlice;\n                let currentChunk = 0;\n                const chunkSize = 10 * 1024 * 1000;\n                let chunks = Math.ceil(file.size / chunkSize);\n                let spark = new SparkMD5.ArrayBuffer();\n                //由于计算整个文件的Md5太慢，因此采用只计算第1块文件的md5的方式\n                let chunkNumberMD5 = 1;\n\n                loadNext();\n\n                fileReader.onload = (e => {\n                    spark.append(e.target.result);\n\n                    if (currentChunk < chunkNumberMD5) {\n                        loadNext();\n                    } else {\n                        let md5 = spark.end();\n                        file.uniqueIdentifier = md5;\n                        file.resume();\n                        console.log(`MD5计算完毕：${file.name} \\nMD5：${md5} \\n分片：${chunks} 大小:${file.size} 用时：${new Date().getTime() - time} ms`);\n                    }\n                });\n\n                fileReader.onerror = function () {\n                    this.error(`文件${file.name}读取出错，请检查该文件`)\n                    file.cancel();\n                };\n\n                function loadNext() {\n                    let start = currentChunk * chunkSize;\n                    let end = ((start + chunkSize) >= file.size) ? file.size : start + chunkSize;\n\n                    fileReader.readAsArrayBuffer(blobSlice.call(file.file, start, end));\n                    currentChunk++;\n                    console.log(\"计算第\"+currentChunk+\"块\");\n                }\n            },\n            close() {\n                this.uploader.cancel();\n            },\n            error(msg) {\n                this.$notify({\n                    title: '错误',\n                    message: msg,\n                    type: 'error',\n                    duration: 2000\n                })\n            }\n        }\n    }\n</script>\n\n<style>\n  .uploader-ui {\n    padding: 15px;\n    margin: 40px auto 0;\n    font-size: 12px;\n    font-family: Microsoft YaHei;\n    box-shadow: 0 0 10px rgba(0, 0, 0, .4);\n  }\n  .uploader-ui .uploader-btn {\n    margin-right: 4px;\n    font-size: 12px;\n    border-radius: 3px;\n    color: #FFF;\n    background-color: #409EFF;\n    border-color: #409EFF;\n    display: inline-block;\n    line-height: 1;\n    white-space: nowrap;\n  }\n  .uploader-ui .uploader-list {\n    max-height: 440px;\n    overflow: auto;\n    overflow-x: hidden;\n    overflow-y: auto;\n  }\n</style>"],"sourceRoot":""}]}